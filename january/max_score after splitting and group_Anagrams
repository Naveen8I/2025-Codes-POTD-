################## GFG ###################
import java.util.*;
class Solution {
    public ArrayList<ArrayList<String>> anagrams(String[] arr) {
        ArrayList<ArrayList<String>> res = new ArrayList<>();
        HashMap<String, Integer> mp = new HashMap<>();
        
        for (int i = 0; i < arr.length; i++) {
            String s = arr[i];
            
            // Find the key by sorting the string
            char[] chars = s.toCharArray();
            Arrays.sort(chars);
            s = new String(chars);
            
            // If key is not present in the hash map, add
            // an empty group (ArrayList) in the result and
            // store the index of the group in hash map
            if (!mp.containsKey(s)) {
                mp.put(s, res.size());
                res.add(new ArrayList<>());
            }
            
            // Insert the string in its correct group
            res.get(mp.get(s)).add(arr[i]);
        }
        
        return res;
    }
}
Time Complexity: 
𝑂(𝑛⋅𝑘log⁡𝑘)
O(n⋅klogk) – Sorting each string and hash map operations.
Space Complexity: 
𝑂(𝑛⋅𝑘)
O(n⋅k) – Hash map and result list storage.

###################### LEETCODE ##################
class Solution {
    public int maxScore(String s) {
        int n = s.length();
        int[] preSum = new int[n];
        int max = 0;
        preSum[0] = s.charAt(0) == '1' ? 1 : 0;
        for(int i = 1; i < s.length();i++){
            if(s.charAt(i) == '1'){
                preSum[i] = 1 + preSum[i-1];
            }
            else{
                preSum[i] = preSum[i-1];
            }
        }
        int count0 = 0;
        for(int i = 0; i < s.length()-1;i++){
            if(s.charAt(i) == '0'){
                count0 += 1;
            }
           int count1Right = preSum[n - 1] - preSum[i]; // '1's on the right
            max = Math.max(max, count0 + count1Right);
            
        }
        return max;
    }
}
Time Complexity: 
𝑂(𝑛)
O(n) – Single pass for prefix sum and another for score calculation.
Space Complexity: 
𝑂(𝑛)
O(n) – Space for the preSum array.
