#################### GFG ################
class Solution {
    public int countSubarrays(int arr[], int k) {
        HashMap<Integer,Integer> map = new HashMap<>();
        map.put(0,1);
        int sum = 0;
        int count = 0;
        for(int a : arr){
            sum += a;
            if(map.containsKey(sum - k)){
                count += map.get(sum-k);
            }
            map.put(sum,map.getOrDefault(sum,0)+1);
        }
        return count;
    }
}
Time Complexity: O(n)
Space Complexity: O(n)

############################# LEETCODE ########################
class Solution {
    public int[] vowelStrings(String[] words, int[][] queries) {
        int n = words.length;
        int m = queries.length;
        int[] preSum = new int[n];
        int[] result = new int[m];

        // Create a set of vowels
        HashSet<Character> set = new HashSet<>(Set.of('a', 'e', 'i', 'o', 'u'));

        // Calculate prefix sum
        preSum[0] = (set.contains(words[0].charAt(0)) && set.contains(words[0].charAt(words[0].length() - 1))) ? 1 : 0;
        for (int i = 1; i < n; i++) {
            String word = words[i];
            char firstChar = word.charAt(0);
            char lastChar = word.charAt(word.length() - 1);
            preSum[i] = preSum[i - 1] + ((set.contains(firstChar) && set.contains(lastChar)) ? 1 : 0);
        }

        // Process queries
        for (int i = 0; i < m; i++) {
            int l = queries[i][0];
            int r = queries[i][1];
            result[i] = preSum[r] - (l > 0 ? preSum[l - 1] : 0);
        }

        return result;
    }
} 
Summary:
Time Complexity: O(n+m)
Space Complexity: 𝑂(𝑛+𝑚)
###########  Another approach ###########
class Solution {
    public int[] vowelStrings(String[] words, int[][] queries) {
        int[] pre = new int[words.length+1];
        for(int i=0; i<words.length; i++)
        {
            if(isVowel(words[i].charAt(0)) && isVowel(words[i].charAt(words[i].length()-1)))
                pre[i+1] = pre[i]+1;
            else
                pre[i+1] = pre[i];
        }
        int[] res = new int[queries.length];
        for(int i=0; i<queries.length; i++)
        {
            res[i] = pre[queries[i][1]+1]-pre[queries[i][0]];
        }
        return res;
    }

    private boolean isVowel(char c) {
        return c=='a'||c=='e'||c=='i'||c=='o'||c=='u';
    }

TC and SC same....
