#################### GFG ####################

class Solution {
    public List<Integer> sumClosest(int[] arr, int target) {
             int n = arr.length;
        Arrays.sort(arr);
        List<Integer> res = new ArrayList<>();
        int minDiff = Integer.MAX_VALUE;

        int left = 0, right = n - 1;

        while (left < right) {
            int currSum = arr[left] + arr[right];

            // Check if this pair is closer than the closest
            // pair so far
            if (Math.abs(target - currSum) < minDiff) {
                minDiff = Math.abs(target - currSum);
                res = Arrays.asList(arr[left], arr[right]);
            }

            // If this pair has less sum, move to greater values
            if (currSum < target)
                left++;

            // If this pair has more sum, move to smaller values
            else if (currSum > target)
                right--;

            // If this pair has sum = target, return it
            else
                return res;
        }

        return res;
    }
}
Time Complexity: O(n log n)
Space Complexity: O(1)

################## LEETCODE ##################

class Solution {
    public int[] minOperations(String boxes) {
        int n = boxes.length();
        int[] answer = new int[n];

        int cumValue = 0;
        int cumValueSum = 0;

        // Find moves for all left balls to index i
        for (int i = 0; i < n; i++) {
            answer[i] = cumValueSum;

            cumValue += boxes.charAt(i) == '0' ? 0 : 1;
            cumValueSum += cumValue;
        }

        cumValue = 0;
        cumValueSum = 0;

        // Find moves for all right balls to index i
        for (int i = n - 1; i >= 0; i--) {
            answer[i] += cumValueSum;

            cumValue += boxes.charAt(i) == '0' ? 0 : 1;
            cumValueSum += cumValue;
        }

        return answer;
    }
}
Time Complexity: 𝑂(𝑛)
Space Complexity: 𝑂(𝑛)
