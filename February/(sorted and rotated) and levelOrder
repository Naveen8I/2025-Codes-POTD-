############### LEETCODE  #############
class Solution {
    public boolean check(int[] nums) {
        int count = 0;
        for(int i = 0; i < nums.length - 1; i++){
            if(nums[i+1] < nums[i]){
               count++;
               if(count > 1) return false;
            }
        }
        if(count == 0) return true;
        
        return nums[0] >= nums[nums.length-1];
    }
}
TC - O(N)
SC - O(1)

################ GFG #########################
class Solution {
    public ArrayList<ArrayList<Integer>> levelOrder(Node root) {
        if(root == null)return new ArrayList<>();
        
        ArrayList<ArrayList<Integer>> res = new ArrayList<>();
        Queue<Node> q = new LinkedList<>();
        
        q.add(root);
        int currLevel = 0;
        
        while(!q.isEmpty()){
            int len = q.size();
            res.add(new ArrayList<>());
            
            for(int i = 0; i < len; i++){
                Node node = q.poll();
                res.get(currLevel).add(node.data);
                
                if(node.left != null)q.add(node.left);
                if(node.right != null)q.add(node.right);
            }
            currLevel++;
        }
        return res;
    }
}
TC : O(m*n*4^L);
SC: O(L);
#m,n are less
