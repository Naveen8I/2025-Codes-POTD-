###################### GFG ######################
class Solution {
    int find(Node root,int[] d){
        if(root == null)return 0;
        int lh = find(root.left,d);
        int rh = find(root.right,d);
        
        d[0] = Math.max(d[0],lh+rh);
        
        return 1 +Math.max(lh,rh);
    }
    int diameter(Node root) {
        int[] d = new int[1];
        find(root,d);
        return d[0];
    }
}
TC : O(N);
SC : O(N);
####################### LEETCODE  #####################
class Solution {
    public int maxAscendingSum(int[] nums) {
        int max = nums[0];
        int sum = nums[0];
        for(int i = 1; i < nums.length; i++){
            if(nums[i-1] < nums[i]){
               sum+= nums[i];
            }
            else{
                
                max =Math.max(max,sum);
                sum = nums[i];
            }
        
        }
        return Math.max(sum,max);
} 
}
TC : O(N);
SC : O(N);
