class Solution {
    // Function to find the height of a binary tree.
    int find(Node node){
        if(node == null)return 0;
        
            int lh = find(node.left);

            int rh = find(node.right);
        
        return 1 + Math.max(lh,rh);
    }
    int height(Node node) {
        int h = find(node);
        return h-1;
    }
}
TC - O(N);
SC - O(N);

########################  LEETCODE  ##################
class Solution {
    public int longestMonotonicSubarray(int[] nums) {
       if (nums.length == 1) return 1;

        int inc = 1, dec = 1, maxLen = 1;

        for (int i = 1; i < nums.length; i++) {
            if (nums[i] > nums[i - 1]) {
                inc++; 
                dec = 1; // Reset decreasing count
            } 
            else if (nums[i] < nums[i - 1]) {
                dec++; 
                inc = 1; // Reset increasing count
            } 
            else { 
                // Reset both if equal values appear
                inc = 1;
                dec = 1;
            }

            maxLen = Math.max(maxLen, Math.max(inc, dec));
        }

        return maxLen;
    }
}
TC - O(N);
SC - O(1);
