###################### GFG ##############

class Solution {
    static int solve(int m, int n, int x,int[][] dp){
        if( n == 0 && x == 0)return 1;
        if(n == 0)return 0;
        if(dp[n][x] != -1)return dp[n][x];
        
        int numWays  = 0;
        
        for(int i = 1; i <= m; i++){
            if(x-i >= 0)numWays += solve(m,n-1,x-i,dp);
        }
        
        return dp[n][x] = numWays;
    }
    static int noOfWays(int m, int n, int x) {
        if(n*m < x)return 0;
        int[][] dp = new int[n+1][x+1];
        
        for(int i = 0; i < n+1; i++){
            for(int j = 0; j < x+1; j++){
                dp[i][j] = -1;
            }
        }
        return solve(m,n,x,dp);
        
    }
};

Time: O(n * x * m) â€“ Each state dp[n][x] computed once, trying m options at each step.

Space: O(n * x) for DP array.

#########################  LEETCODE  #################################
class Solution {
    public long maximumValueSum(int[] nums, int k, int[][] edges) {
        
        long sum = 0;
        int count = 0;
        int minDiff = Integer.MAX_VALUE;

        for(int i : nums){
            if((i ^ k) > i){
                sum += (i^k);
                count++;
            }
            else{
                sum += i;
            }
           minDiff = Math.min(minDiff,Math.abs(i-(i^k)));
        }

        if(count % 2 == 0)return sum;
        return sum - minDiff;
    }
}

TC - O(N)
SC - O(1)
